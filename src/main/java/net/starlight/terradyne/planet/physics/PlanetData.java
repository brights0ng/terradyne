package net.starlight.terradyne.planet.physics;

import net.minecraft.block.Block;
import java.util.Map;

/**
 * Immutable container for calculated planet parameters
 * Generated by PhysicsCalculator from PlanetConfig
 */
public class PlanetData {
    
    // === CORE CALCULATED PROPERTIES ===
    private final double gravity;                    // Surface gravity (Earth = 1.0)
    private final PlanetAge planetAge;              // Calculated age category
    private final double averageSurfaceTemp;        // °C surface temperature
    private final double habitability;             // 0.0-1.0 life sustainability factor
    private final double waterErosion;             // 0.0-1.0 water erosion factor
    private final double windErosion;              // 0.0-1.0 atmospheric erosion factor
    
    // === GEOLOGICAL PROPERTIES ===
    private final Block mainRockType;              // Primary surface block
    private final int seaLevel;                    // Minecraft Y-level for sea level
    private final double volcanismLevel;           // 0.0-1.0 volcanic activity
    private final double glacialCoverage;          // 0.0-1.0 ice coverage factor
    
    // === ATMOSPHERIC PROPERTIES ===
    private final double actualAtmosphericDensity; // Physics-corrected density
    private final double actualWaterContent;       // Physics-corrected water content
    private final double actualTectonicActivity;   // Physics-corrected tectonic activity
    
    // === CLIMATE FACTORS ===
    private final Map<String, Double> climateFactors; // Regional climate modifiers
    
    // === TERRAIN GENERATION PROPERTIES ===
    private final double continentalScale;         // Scale factor for continental features
    private final double mountainScale;            // Scale factor for mountain height
    private final double erosionScale;             // Scale factor for erosion effects

    /**
     * Create immutable planet data (package-private, used by PhysicsCalculator)
     */
    PlanetData(double gravity, PlanetAge planetAge, double averageSurfaceTemp, 
               double habitability, double waterErosion, double windErosion,
               Block mainRockType, int seaLevel, double volcanismLevel, 
               double glacialCoverage, double actualAtmosphericDensity, 
               double actualWaterContent, double actualTectonicActivity,
               Map<String, Double> climateFactors, double continentalScale,
               double mountainScale, double erosionScale) {
        
        this.gravity = gravity;
        this.planetAge = planetAge;
        this.averageSurfaceTemp = averageSurfaceTemp;
        this.habitability = habitability;
        this.waterErosion = waterErosion;
        this.windErosion = windErosion;
        this.mainRockType = mainRockType;
        this.seaLevel = seaLevel;
        this.volcanismLevel = volcanismLevel;
        this.glacialCoverage = glacialCoverage;
        this.actualAtmosphericDensity = actualAtmosphericDensity;
        this.actualWaterContent = actualWaterContent;
        this.actualTectonicActivity = actualTectonicActivity;
        this.climateFactors = Map.copyOf(climateFactors); // Immutable copy
        this.continentalScale = continentalScale;
        this.mountainScale = mountainScale;
        this.erosionScale = erosionScale;
    }

    // === GETTERS ===

    public double getGravity() { return gravity; }
    public PlanetAge getPlanetAge() { return planetAge; }
    public double getAverageSurfaceTemp() { return averageSurfaceTemp; }
    public double getHabitability() { return habitability; }
    public double getWaterErosion() { return waterErosion; }
    public double getWindErosion() { return windErosion; }
    public Block getMainRockType() { return mainRockType; }
    public int getSeaLevel() { return seaLevel; }
    public double getVolcanismLevel() { return volcanismLevel; }
    public double getGlacialCoverage() { return glacialCoverage; }
    public double getActualAtmosphericDensity() { return actualAtmosphericDensity; }
    public double getActualWaterContent() { return actualWaterContent; }
    public double getActualTectonicActivity() { return actualTectonicActivity; }
    public Map<String, Double> getClimateFactors() { return climateFactors; }
    public double getContinentalScale() { return continentalScale; }
    public double getMountainScale() { return mountainScale; }
    public double getErosionScale() { return erosionScale; }

    // === UTILITY METHODS ===

    /**
     * Get a climate factor by name, or default value if not present
     */
    public double getClimateFactor(String factorName, double defaultValue) {
        return climateFactors.getOrDefault(factorName, defaultValue);
    }

    /**
     * Check if planet supports liquid water
     */
    public boolean hasLiquidWater() {
        return actualWaterContent > 0.1 && 
               averageSurfaceTemp > 0 && 
               averageSurfaceTemp < 100 &&
               actualAtmosphericDensity > 0.1;
    }

    /**
     * Check if planet has significant geological activity
     */
    public boolean isGeologicallyActive() {
        return actualTectonicActivity > 0.3 || volcanismLevel > 0.4;
    }

    /**
     * Check if planet has significant atmosphere
     */
    public boolean hasAtmosphere() {
        return actualAtmosphericDensity > 0.05;
    }

    /**
     * Get a descriptive summary of planet characteristics
     */
    public String getSummary() {
        StringBuilder sb = new StringBuilder();
        sb.append(String.format("%.1f°C", averageSurfaceTemp));
        
        if (hasLiquidWater()) {
            sb.append(", Liquid Water");
        }
        
        if (isGeologicallyActive()) {
            sb.append(", Active Geology");
        }
        
        if (habitability > 0.6) {
            sb.append(", Highly Habitable");
        } else if (habitability > 0.3) {
            sb.append(", Marginally Habitable");
        } else {
            sb.append(", Hostile");
        }
        
        return sb.toString();
    }

    @Override
    public String toString() {
        return String.format("PlanetData{age=%s, temp=%.1f°C, gravity=%.2fg, habitability=%.2f}",
                planetAge.getDisplayName(), averageSurfaceTemp, gravity, habitability);
    }
}